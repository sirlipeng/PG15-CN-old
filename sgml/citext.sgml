<!-- doc/src/sgml/citext.sgml -->

<sect1 id="citext" xreflabel="citext">
<!--==========================orignal english content==========================
 <title>citext</title>
____________________________________________________________________________-->
 <title>citext</title>

<!--==========================orignal english content==========================
 <indexterm zone="citext">
  <primary>citext</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="citext">
  <primary>citext</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <para>
  The <filename>citext</filename> module provides a case-insensitive
  character string type, <type>citext</type>. Essentially, it internally calls
  <function>lower</function> when comparing values. Otherwise, it behaves almost
  exactly like <type>text</type>.
 </para>
____________________________________________________________________________-->
 <para>
  <filename>citext</filename>模块提供了一种大小写不敏感的字符串类型：<type>citext</type>。特别地，它在比较值时内部调用的是<function>lower</function>。除此之外，它的行为几乎与<type>text</type>完全相同。
 </para>

 <tip>
<!--==========================orignal english content==========================
  <para>
   Consider using <firstterm>nondeterministic collations</firstterm> (see
   <xref linkend="collation-nondeterministic"/>) instead of this module.  They
   can be used for case-insensitive comparisons, accent-insensitive
   comparisons, and other combinations, and they handle more Unicode special
   cases correctly.
  </para>
____________________________________________________________________________-->
  <para>
   可考虑使用<firstterm>nondeterministic collations</firstterm> (参见
   <xref linkend="collation-nondeterministic"/>)来代替这个模块.它们可被用于大小写不敏感的比较，不区分重音的比较，以及其他组合，
   并且他们可以正确的处理更多Unicode特殊情况。
  </para>
 </tip>

<!--==========================orignal english content==========================
 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>
____________________________________________________________________________-->
 <para>
  此模块被视为<quote>可信(trusted)</quote>，也就是说，它可以由当前数据库上具有 <literal>CREATE</literal> 权限的非超级用户来安装。
 </para>

 <sect2>
<!--==========================orignal english content==========================
  <title>Rationale</title>
____________________________________________________________________________-->
  <title>基本原理</title>

<!--==========================orignal english content==========================
  <para>
   The standard approach to doing case-insensitive matches
   in <productname>PostgreSQL</productname> has been to use the <function>lower</function>
   function when comparing values, for example

<programlisting>
SELECT * FROM tab WHERE lower(col) = LOWER(?);
</programlisting>
  </para>
____________________________________________________________________________-->
  <para>
   在<productname>PostgreSQL</productname>中做大小写不敏感匹配的标准方法曾经是在比较值时使用<function>lower</function>函数，例如：

<programlisting>
SELECT * FROM tab WHERE lower(col) = LOWER(?);
</programlisting>
  </para>

<!--==========================orignal english content==========================
  <para>
   This works reasonably well, but has a number of drawbacks:
  </para>
____________________________________________________________________________-->
  <para>
   这工作得比较好，但是有一些缺点：
  </para>

   <itemizedlist>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      It makes your SQL statements verbose, and you always have to remember to
      use <function>lower</function> on both the column and the query value.
     </para>
____________________________________________________________________________-->
     <para>
      它让你的 SQL 语句冗长，并且你必须总是要记住在列和查询值上使用<function>lower</function>。
     </para>
    </listitem>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      It won't use an index, unless you create a functional index using
      <function>lower</function>.
     </para>
____________________________________________________________________________-->
     <para>
      它不会使用一个索引，除非你使用<function>lower</function>创建一个函数索引。
     </para>
    </listitem>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      If you declare a column as <literal>UNIQUE</literal> or <literal>PRIMARY
      KEY</literal>, the implicitly generated index is case-sensitive.  So it's
      useless for case-insensitive searches, and it won't enforce
      uniqueness case-insensitively.
     </para>
____________________________________________________________________________-->
     <para>
      如果你声明一个列为<literal>UNIQUE</literal>或<literal>PRIMARY KEY</literal>，隐式生成的索引是大小写敏感的。因此，它对于大小写不敏感的搜索是没有用处的，并且它不会强制大小写不敏感的唯一性。
     </para>
    </listitem>
   </itemizedlist>

<!--==========================orignal english content==========================
   <para>
    The <type>citext</type> data type allows you to eliminate calls
    to <function>lower</function> in SQL queries, and allows a primary key to
    be case-insensitive. <type>citext</type> is locale-aware, just
    like <type>text</type>, which means that the matching of upper case and
    lower case characters is dependent on the rules of
    the database's <literal>LC_CTYPE</literal> setting. Again, this behavior is
    identical to the use of <function>lower</function> in queries. But because it's
    done transparently by the data type, you don't have to remember to do
    anything special in your queries.
   </para>
____________________________________________________________________________-->
   <para>
    <type>citext</type>数据类型允许你在 SQL 查询中消除对<function>lower</function>的调用，并且允许一个主键是大小写无关的。就和<type>text</type>一样，<type>citext</type>是区域相关的，这意味着大写和小写字符的匹配依赖于数据库<literal>LC_CTYPE</literal>设置的规则。此外，这种行为和在查询中使用<function>lower</function>是一样的。但是因为它是由数据类型以透明的方式完成的，你不需要记住在你的查询中做任何特殊的事情。
   </para>

 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>How to Use It</title>
____________________________________________________________________________-->
  <title>如何使用它</title>

<!--==========================orignal english content==========================
  <para>
   Here's a simple example of usage:

<programlisting>
CREATE TABLE users (
    nick CITEXT PRIMARY KEY,
    pass TEXT   NOT NULL
);

INSERT INTO users VALUES ( 'larry',  sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Tom',    sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Damian', sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'NEAL',   sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Bj&oslash;rn',  sha256(random()::text::bytea) );

SELECT * FROM users WHERE nick = 'Larry';
</programlisting>

   The <command>SELECT</command> statement will return one tuple, even though
   the <structfield>nick</structfield> column was set to <literal>larry</literal> and the query
   was for <literal>Larry</literal>.
  </para>
____________________________________________________________________________-->
  <para>
   这里是一个简单的用法示例：

<programlisting>
CREATE TABLE users (
    nick CITEXT PRIMARY KEY,
    pass TEXT   NOT NULL
);

INSERT INTO users VALUES ( 'larry',  sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Tom',    sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Damian', sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'NEAL',   sha256(random()::text::bytea) );
INSERT INTO users VALUES ( 'Bj&oslash;rn',  sha256(random()::text::bytea) );

SELECT * FROM users WHERE nick = 'Larry';
</programlisting>

   即使<structfield>nick</structfield>列被设置为<literal>larry</literal>而查询是<literal>Larry</literal>，<command>SELECT</command>语句也将只返回一个元组。
  </para>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>String Comparison Behavior</title>
____________________________________________________________________________-->
  <title>串比较行为</title>

<!--==========================orignal english content==========================
  <para>
   <type>citext</type> performs comparisons by converting each string to lower
   case (as though <function>lower</function> were called) and then comparing the
   results normally.  Thus, for example, two strings are considered equal
   if <function>lower</function> would produce identical results for them.
  </para>
____________________________________________________________________________-->
  <para>
   <type>citext</type>执行比较时先将每一个串转换成小写形式（调用<function>lower</function>）然后正常地比较结果。因此，如果两个串通过<function>lower</function>产生相同的结果，它们就被认为是相等。
  </para>

<!--==========================orignal english content==========================
  <para>
   In order to emulate a case-insensitive collation as closely as possible,
   there are <type>citext</type>-specific versions of a number of string-processing
   operators and functions.  So, for example, the regular expression
   operators <literal>~</literal> and <literal>~*</literal> exhibit the same behavior when
   applied to <type>citext</type>: they both match case-insensitively.
   The same is true
   for <literal>!~</literal> and <literal>!~*</literal>, as well as for the
   <literal>LIKE</literal> operators <literal>~~</literal> and <literal>~~*</literal>, and
   <literal>!~~</literal> and <literal>!~~*</literal>. If you'd like to match
   case-sensitively, you can cast the operator's arguments to <type>text</type>.
  </para>
____________________________________________________________________________-->
  <para>
   为了尽可能接近地模拟一种大小写不敏感的排序规则，一些串处理操作符和函数有<type>citext</type>相关的版本。例如，当应用到<type>citext</type>时，正则表达式操作符<literal>~</literal>和<literal>~*</literal>会展现出相同的行为：它们都以大小写不敏感的方式匹配。<literal>!~</literal>和<literal>!~*</literal>也是一样，以及<literal>LIKE</literal>操作符<literal>~~</literal>和<literal>~~*</literal>，以及<literal>!~~</literal>和<literal>!~~*</literal>。如果你想以大小写敏感的方式匹配，你可以把该操作符的参数造型成<type>text</type>。
  </para>

<!--==========================orignal english content==========================
  <para>
   Similarly, all of the following functions perform matching
   case-insensitively if their arguments are <type>citext</type>:
  </para>
____________________________________________________________________________-->
  <para>
   相似地，如果下列函数的参数是<type>citext</type>，它们会以大小写不敏感的方式执行匹配：
  </para>

  <itemizedlist>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>regexp_match()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>regexp_match()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>regexp_matches()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>regexp_matches()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>regexp_replace()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>regexp_replace()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>regexp_split_to_array()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>regexp_split_to_array()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>regexp_split_to_table()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>regexp_split_to_table()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>replace()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>replace()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>split_part()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>split_part()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>strpos()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>strpos()</function>
    </para>
   </listitem>
   <listitem>
<!--==========================orignal english content==========================
    <para>
      <function>translate()</function>
    </para>
____________________________________________________________________________-->
    <para>
      <function>translate()</function>
    </para>
   </listitem>
  </itemizedlist>

<!--==========================orignal english content==========================
  <para>
   For the regexp functions, if you want to match case-sensitively, you can
   specify the <quote>c</quote> flag to force a case-sensitive match.  Otherwise,
   you must cast to <type>text</type> before using one of these functions if
   you want case-sensitive behavior.
  </para>
____________________________________________________________________________-->
  <para>
   对于 regexp 函数，如果你想要以大小写敏感的方式匹配，你可以指定<quote>c</quote>标志来强制大小写敏感的匹配。否则，如果你想要大小写敏感的行为，你必须在使用这些函数之一之前造型到<type>text</type>。
  </para>

 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Limitations</title>
____________________________________________________________________________-->
  <title>限制</title>

   <itemizedlist>
    <listitem>
<!--==========================orignal english content==========================
     <para>
      <type>citext</type>'s case-folding behavior depends on
      the <literal>LC_CTYPE</literal> setting of your database. How it compares
      values is therefore determined when the database is created.
      It is not truly
      case-insensitive in the terms defined by the Unicode standard.
      Effectively, what this means is that, as long as you're happy with your
      collation, you should be happy with <type>citext</type>'s comparisons. But
      if you have data in different languages stored in your database, users
      of one language may find their query results are not as expected if the
      collation is for another language.
     </para>
____________________________________________________________________________-->
     <para>
      <type>citext</type>的大小写折叠行为取决于你的数据库的<literal>LC_CTYPE</literal>设置。因此它如何比较值是在数据库被创建时决定的。在 Unicode 标准定义的术语中没有真正的大小写不敏感。实际上，它的含义是，只要你对你的排序规则满意，你就应该对<type>citext</type>的比较满意。但是如果在你的数据库中存储有不同语言的数据，当排序规则是用于一种语言时，另一种语言的用户可能会发现他们的查询结果并不是所期待的。
     </para>
    </listitem>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      As of <productname>PostgreSQL</productname> 9.1, you can attach a
      <literal>COLLATE</literal> specification to <type>citext</type> columns or data
      values.  Currently, <type>citext</type> operators will honor a non-default
      <literal>COLLATE</literal> specification while comparing case-folded strings,
      but the initial folding to lower case is always done according to the
      database's <literal>LC_CTYPE</literal> setting (that is, as though
      <literal>COLLATE "default"</literal> were given).  This may be changed in a
      future release so that both steps follow the input <literal>COLLATE</literal>
      specification.
     </para>
____________________________________________________________________________-->
     <para>
      自<productname>PostgreSQL</productname> 9.1 其，你可以为<type>citext</type>列或数据值附加一个<literal>COLLATE</literal>说明。当前，在比较大小写折叠过的字符串时，<type>citext</type>操作符将尊重一种非默认的<literal>COLLATE</literal>说明，但是最初到小写形式的折叠是根据数据库的 <literal>LC_CTYPE</literal>设置完成的（就是说，尽管给出了<literal>COLLATE "default"</literal>）。这可能在未来的发行中被改变，这样两步都能遵循输入的<literal>COLLATE</literal>说明。
     </para>
    </listitem>

    <listitem>
<!--==========================orignal english content==========================
     <para>
       <type>citext</type> is not as efficient as <type>text</type> because the
       operator functions and the B-tree comparison functions must make copies
       of the data and convert it to lower case for comparisons.  Also, only
       <type>text</type> can support B-Tree deduplication.  However,
       <type>citext</type> is slightly more efficient than using
       <function>lower</function> to get case-insensitive matching.
     </para>
____________________________________________________________________________-->
     <para>
       <type>citext</type>的效率不如<type>text</type>，因为操作符函数和 B 树比较函数必须创建数据的拷贝并且将它转换为小写形式来进行比较。
       此外，只有<type>text</type>可以支持B树重复数据删除。不过，在进行大小写不敏感的匹配时，<type>citext</type>比使用<function>lower</function>的效率要略高。
     </para>
    </listitem>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      <type>citext</type> doesn't help much if you need data to compare
      case-sensitively in some contexts and case-insensitively in other
      contexts.  The standard answer is to use the <type>text</type> type and
      manually use the <function>lower</function> function when you need to compare
      case-insensitively; this works all right if case-insensitive comparison
      is needed only infrequently.  If you need case-insensitive behavior most
      of the time and case-sensitive infrequently, consider storing the data
      as <type>citext</type> and explicitly casting the column to <type>text</type>
      when you want case-sensitive comparison.  In either situation, you will
      need two indexes if you want both types of searches to be fast.
    </para>
____________________________________________________________________________-->
     <para>
      如果你在某些环境下需要以大小写敏感的方式比较数据并且在另一些环境下需要以大小写不敏感的方式比较数据，<type>citext</type>就帮不上什么忙。标准的答案是使用<type>text</type>类型并且在你需要以大小写不敏感的方式比较时手工使用<function>lower</function>函数。如果大小写不敏感的比较需求不频繁，这会工作得不错。如果你大部分时间需要大小写不敏感的行为，考虑将数据存储为<type>citext</type>并且在进行大小写敏感比较时显式地将列造型为<type>text</type>。不管在那种情况下，你都需要两个索引来让两种类型的搜索更快。
    </para>
    </listitem>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      The schema containing the <type>citext</type> operators must be
      in the current <varname>search_path</varname> (typically <literal>public</literal>);
      if it is not, the normal case-sensitive <type>text</type> operators
      will be invoked instead.
    </para>
____________________________________________________________________________-->
     <para>
      包含<type>citext</type>操作符的模式必须在当前的<varname>search_path</varname>（通常是<literal>public</literal>）中。如果它不在搜索路径中，普通的大小写敏感的<type>text</type>操作符将会取而代之。
    </para>
    </listitem>

    <listitem>
<!--==========================orignal english content==========================
     <para>
      The approach of lower-casing strings for comparison does not handle some
      Unicode special cases correctly, for example when one upper-case letter
      has two lower-case letter equivalents.  Unicode distinguishes between
      <firstterm>case mapping</firstterm> and <firstterm>case
      folding</firstterm> for this reason.  Use nondeterministic collations
      instead of <type>citext</type> to handle that correctly.
     </para>
____________________________________________________________________________-->
     <para>
	  比较小写字符串的方法不能正确处理一些Unicode特殊情况，例如当一个大写字母与两个小写字母相等时。
	  因此Unicode区分了<firstterm>case mapping</firstterm> 和 <firstterm>case folding</firstterm>。
	  用非确定理序代替<type>citext</type>以便正确的处理。
     </para>
    </listitem>
   </itemizedlist>
 </sect2>

 <sect2>
<!--==========================orignal english content==========================
  <title>Author</title>
____________________________________________________________________________-->
  <title>作者</title>

<!--==========================orignal english content==========================
  <para>
   David E. Wheeler <email>david@kineticode.com</email>
  </para>
____________________________________________________________________________-->
  <para>
   David E. Wheeler <email>david@kineticode.com</email>
  </para>

<!--==========================orignal english content==========================
  <para>
    Inspired by the original <type>citext</type> module by Donald Fraser.
  </para>
____________________________________________________________________________-->
  <para>
    受 Donald Fraser 的<type>citext</type>模块启发。
  </para>

 </sect2>

</sect1>
