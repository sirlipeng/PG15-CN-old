<!--
doc/src/sgml/ref/create_language.sgml
PostgreSQL documentation
-->

<refentry id="sql-createlanguage">
<!--==========================orignal english content==========================
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>
____________________________________________________________________________-->
 <indexterm zone="sql-createlanguage">
  <primary>CREATE LANGUAGE</primary>
 </indexterm>

<!--==========================orignal english content==========================
 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>
____________________________________________________________________________-->
 <refmeta>
  <refentrytitle>CREATE LANGUAGE</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

<!--==========================orignal english content==========================
 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>define a new procedural language</refpurpose>
 </refnamediv>
____________________________________________________________________________-->
 <refnamediv>
  <refname>CREATE LANGUAGE</refname>
  <refpurpose>定义一种新的过程语言</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<!--==========================orignal english content==========================
<synopsis>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
</synopsis>
____________________________________________________________________________-->
<synopsis>
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
    HANDLER <replaceable class="parameter">call_handler</replaceable> [ INLINE <replaceable class="parameter">inline_handler</replaceable> ] [ VALIDATOR <replaceable>valfunction</replaceable> ]
CREATE [ OR REPLACE ] [ TRUSTED ] [ PROCEDURAL ] LANGUAGE <replaceable class="parameter">name</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createlanguage-description">
<!--==========================orignal english content==========================
  <title>Description</title>
____________________________________________________________________________-->
  <title>描述</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE LANGUAGE</command> registers a new
   procedural language with a <productname>PostgreSQL</productname>
   database.  Subsequently, functions and procedures can be
   defined in this new language.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE LANGUAGE</command>为一个
   <productname>PostgreSQL</productname>数据库注册一种新的
   过程语言。接着，可以用这种新语言定义函数和存储过程。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE LANGUAGE</command> effectively associates the
   language name with handler function(s) that are responsible for executing
   functions written in the language.  Refer to <xref linkend="plhandler"/>
   for more information about language handlers.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE LANGUAGE</command>实际上把该语言名称与
   负责执行用该语言编写的函数的处理器函数关联在一起。有关语言处理器的
   更多信息可以参考<xref linkend="plhandler"/>。
  </para>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE OR REPLACE LANGUAGE</command> will either create a
   new language, or replace an existing definition.  If the language
   already exists, its parameters are updated according to the command,
   but the language's ownership and permissions settings do not change,
   and any existing functions written in the language are assumed to still
   be valid.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE OR REPLACE LANGUAGE</command>将创建
   或者替换一种现有的定义。如果该语言已经存在，其参数会被根据命令更新。但
   该语言的拥有关系和权限设置不会更改，并且任何已有的用该语言编写的
   函数仍然被假定有效。
  </para>
<!--==========================orignal english content==========================
  <para>
   One must have the
   <productname>PostgreSQL</productname> superuser privilege to
   register a new language or change an existing language's parameters.
   However, once the language is created it is valid to assign ownership of
   it to a non-superuser, who may then drop it, change its permissions,
   rename it, or assign it to a new owner.  (Do not, however, assign
   ownership of the underlying C functions to a non-superuser; that would
   create a privilege escalation path for that user.)
  </para>
____________________________________________________________________________-->
  <para>
   必须具有<productname>PostgreSQL</productname>超级用户权限才能注册新语言或更改现有语言的参数。
   然而，一旦语言被创建，将它的所有权分配给非超级用户是有效的，然后他可以删除它、更改其权限、重命名它或
   将其分配给新的所有者。（但是，不要将底层 C 函数的所有权分配给非超级用户；这会为该用户创建权限提升路径。）
  </para>
<!--==========================orignal english content==========================
  <para>
   The form of <command>CREATE LANGUAGE</command> that does not supply
   any handler function is obsolete.  For backwards compatibility with
   old dump files, it is interpreted as <command>CREATE EXTENSION</command>.
   That will work if the language has been packaged into an extension of
   the same name, which is the conventional way to set up procedural
   languages.
  </para>
____________________________________________________________________________-->
  <para>
   不提供任何处理函数的<command>CREATE LANGUAGE</command>形式已过时。
   为了向后兼容旧的转储文件，它被解释为<command>CREATE EXTENSION</command>。
   如果语言被打包到同名的扩展中，这将起作用，这是设置过程语言的传统方式。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-parameters">
<!--==========================orignal english content==========================
  <title>Parameters</title>
____________________________________________________________________________-->
  <title>参数</title>

   <variablelist>
    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>TRUSTED</literal></term>
____________________________________________________________________________-->
     <term><literal>TRUSTED</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><literal>TRUSTED</literal> specifies that the language does
       not grant access to data that the user would not otherwise
       have.  If this key word is omitted
       when registering the language, only users with the
       <productname>PostgreSQL</productname> superuser privilege can
       use this language to create new functions.
      </para>
____________________________________________________________________________-->
      <para><literal>TRUSTED</literal>指定该语言不会授予用户不该具有的
      数据访问。如果在注册语言时这个关键词被省略，只有具有
       <productname>PostgreSQL</productname>超级用户特权的用户才能
       使用该语言创建新函数。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>PROCEDURAL</literal></term>
____________________________________________________________________________-->
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       This is a noise word.
      </para>
____________________________________________________________________________-->
      <para>
       这是一个噪声词。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><replaceable class="parameter">name</replaceable></term>
____________________________________________________________________________-->
     <term><replaceable class="parameter">name</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para>
       The name of the new procedural language.
       The name must be unique among the languages in the database.
      </para>
____________________________________________________________________________-->
      <para>
       新过程语言的名称。该名称必须在该数据库的语言中唯一。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>
____________________________________________________________________________-->
     <term><literal>HANDLER</literal> <replaceable class="parameter">call_handler</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><replaceable class="parameter">call_handler</replaceable> is
       the name of a previously registered function that will be
       called to execute the procedural language's functions.  The call
       handler for a procedural language must be written in a compiled
       language such as C with version 1 call convention and
       registered with <productname>PostgreSQL</productname> as a
       function taking no arguments and returning the
       <type>language_handler</type> type, a placeholder type that is
       simply used to identify the function as a call handler.
      </para>
____________________________________________________________________________-->
      <para><replaceable class="parameter">call_handler</replaceable>
       是一个之前注册的函数的名称，它将被调用来执行该过程语言的函数。
       一种过程语言的调用处理器必须以一种编译型语言（如 C）编写并且
       具有版本 1 的调用约定，它必须在
       <productname>PostgreSQL</productname>内注册为一个没有
       参数并且返回<type>language_handler</type>类型的函数。
       <type>language_handler</type>是一种占位符类型， 它被用来
       标识该函数为一个调用处理器。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>
____________________________________________________________________________-->
     <term><literal>INLINE</literal> <replaceable class="parameter">inline_handler</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><replaceable class="parameter">inline_handler</replaceable> is the
       name of a previously registered function that will be called
       to execute an anonymous code block
       (<link linkend="sql-do"><command>DO</command></link> command)
       in this language.
       If no <replaceable class="parameter">inline_handler</replaceable>
       function is specified, the language does not support anonymous code
       blocks.
       The handler function must take one argument of
       type <type>internal</type>, which will be the <command>DO</command> command's
       internal representation, and it will typically return
       <type>void</type>.  The return value of the handler is ignored.
      </para>
____________________________________________________________________________-->
      <para><replaceable class="parameter">inline_handler</replaceable>
       是一个之前注册的函数的名称，它将被调用来执行一个该语言的匿名代码块（
       <link linkend="sql-do"><command>DO</command></link>命令）。如果没有指定
       <replaceable class="parameter">inline_handler</replaceable>函数，则
       该语言不支持匿名代码块。该处理器函数必须接受一个<type>internal</type>
       类型的参数，该参数将是<command>DO</command>命令的内部表示，而且它通常
       将返回<type>void</type>。该处理器的返回值会被忽略。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
<!--==========================orignal english content==========================
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>
____________________________________________________________________________-->
     <term><literal>VALIDATOR</literal> <replaceable class="parameter">valfunction</replaceable></term>

     <listitem>
<!--==========================orignal english content==========================
      <para><replaceable class="parameter">valfunction</replaceable> is the
       name of a previously registered function that will be called
       when a new function in the language is created, to validate the
       new function.
       If no
       validator function is specified, then a new function will not
       be checked when it is created.
       The validator function must take one argument of
       type <type>oid</type>, which will be the OID of the
       to-be-created function, and will typically return <type>void</type>.
      </para>
____________________________________________________________________________-->
      <para><replaceable class="parameter">valfunction</replaceable> is the
       是一个之前注册的函数的名称，当一个该语言的新函数被创建时会调用该函数来
       验证新函数。如果没有指定验证器函数，那么一个新函数被创建时不会被检查。
       验证器函数必须接受一个<type>oid</type>类型的参数，它将是要被创建的
       函数的 OID，而且它通常将返回<type>void</type>。
      </para>

<!--==========================orignal english content==========================
      <para>
       A validator function would typically inspect the function body
       for syntactical correctness, but it can also look at other
       properties of the function, for example if the language cannot
       handle certain argument types.  To signal an error, the
       validator function should use the <function>ereport()</function>
       function.  The return value of the function is ignored.
      </para>
____________________________________________________________________________-->
      <para>
       一个验证器函数通常会检查函数体中的语法正确性，但是它也能查看函数的其他
       属性，例如该语言能否处理特定的参数类型。为了发出一个错误，验证器函数应该
       使用<function>ereport()</function>函数。验证器函数的返回值会被忽略。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 id="sql-createlanguage-notes">
<!--==========================orignal english content==========================
  <title>Notes</title>
____________________________________________________________________________-->
  <title>注解</title>

<!--==========================orignal english content==========================
  <para>
   Use <link linkend="sql-droplanguage"><command>DROP LANGUAGE</command></link> to drop procedural languages.
  </para>
____________________________________________________________________________-->
  <para>
   使用<link linkend="sql-droplanguage"><command>DROP LANGUAGE</command></link>删除过程语言。
  </para>

<!--==========================orignal english content==========================
  <para>
   The system catalog <classname>pg_language</classname> (see <xref
   linkend="catalog-pg-language"/>) records information about the
   currently installed languages.  Also, the <application>psql</application>
   command <command>\dL</command> lists the installed languages.
  </para>
____________________________________________________________________________-->
  <para>
   系统目录<classname>pg_language</classname>（见<xref
   linkend="catalog-pg-language"/>）记录着有关当前已安装的语言的信息。
   还有，<application>psql</application>命令<command>\dL</command>列出已安装的语言。
  </para>

<!--==========================orignal english content==========================
  <para>
   To create functions in a procedural language, a user must have the
   <literal>USAGE</literal> privilege for the language.  By default,
   <literal>USAGE</literal> is granted to <literal>PUBLIC</literal> (i.e., everyone)
   for trusted languages.  This can be revoked if desired.
  </para>
____________________________________________________________________________-->
  <para>
   要以一种过程语言创建函数，用户必须具有对于该语言的
   <literal>USAGE</literal>特权。默认情况下，对于可信语言，
   <literal>USAGE</literal>被授予给<literal>PUBLIC</literal>（即所有人）。
   如果需要可以将它收回。
  </para>

<!--==========================orignal english content==========================
  <para>
   Procedural languages are local to individual databases.
   However, a language can be installed into the <literal>template1</literal>
   database, which will cause it to be available automatically in
   all subsequently-created databases.
  </para>
____________________________________________________________________________-->
  <para>
   过程语言对于单个数据库来说是本地的。但是，一种语言可以被安装在
   <literal>template1</literal>数据库中，这会导致它在所有后续创建的
   数据库中自动变得可用。
  </para>
 </refsect1>

 <refsect1 id="sql-createlanguage-examples">
<!--==========================orignal english content==========================
  <title>Examples</title>
____________________________________________________________________________-->
  <title>示例</title>

<!--==========================orignal english content==========================
  <para>
   A minimal sequence for creating a new procedural language is:
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
   Typically that would be written in an extension's creation script,
   and users would do this to install the extension:
<programlisting>
CREATE EXTENSION plsample;
</programlisting></para>
____________________________________________________________________________-->
  <para>
   创建新的过程语言的最小顺序是：
<programlisting>
CREATE FUNCTION plsample_call_handler() RETURNS language_handler
    AS '$libdir/plsample'
    LANGUAGE C;
CREATE LANGUAGE plsample
    HANDLER plsample_call_handler;
</programlisting>
   通常这会写在扩展的创建脚本中，用户会这样做来安装扩展：
<programlisting>
CREATE EXTENSION plsample;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-createlanguage-compat">
<!--==========================orignal english content==========================
  <title>Compatibility</title>
____________________________________________________________________________-->
  <title>兼容性</title>

<!--==========================orignal english content==========================
  <para>
   <command>CREATE LANGUAGE</command> is a
   <productname>PostgreSQL</productname> extension.
  </para>
____________________________________________________________________________-->
  <para>
   <command>CREATE LANGUAGE</command>是一种
   <productname>PostgreSQL</productname>扩展。
  </para>
 </refsect1>

 <refsect1>
<!--==========================orignal english content==========================
  <title>See Also</title>
____________________________________________________________________________-->
  <title>另见</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterlanguage"/></member>
   <member><xref linkend="sql-createfunction"/></member>
   <member><xref linkend="sql-droplanguage"/></member>
   <member><xref linkend="sql-grant"/></member>
   <member><xref linkend="sql-revoke"/></member>
  </simplelist>
 </refsect1>
</refentry>
